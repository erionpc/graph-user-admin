@using B2CUserAdmin.Shared.Users

@if (ChildContent == null)
{

    <button class="btn btn-sm btn-danger @(IsEnabled ? "" : "disabled")" @onclick="async () => { if (User != null) await DeleteUser(User); }" @attributes="AdditionalAttributes"><span class="fa fa-trash">@Label</span></button>

}
else
{

    <button class="btn btn-sm btn-danger @(IsEnabled ? "" : "disabled")" @onclick="async () => { if (User != null) await DeleteUser(User); }" @attributes="AdditionalAttributes">
        @ChildContent
    </button>
}

@code {
    [Parameter] public UserViewModel? User { get; set; }

    [Parameter] public string? Label { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();


    [Parameter] public EventCallback<UserViewModel> OnUserDeleted { get; set; }

    private bool IsEnabled => User?.ObjectId != default;


    private async Task DeleteUser(UserViewModel user)
    {
        await OnUserDeleted.InvokeAsync(User!);
    }

}
