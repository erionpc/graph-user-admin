@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IJSRuntime JSRuntime

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>

        <NavLink class="nav-link" href="#" @onclick="ToggleUserSubMenu">
            <span class="oi oi-person" aria-hidden="true"></span> @(!string.IsNullOrWhiteSpace(context.User.Identity!.Name) ? context.User.Identity.Name : "My Account")
        </NavLink>
        @if (expandUserSubMenu)
        {
            <ul class="nav flex-column">
                <NavLink class="nav-link btn btn-link" @onclick="BeginLogoutAsync">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Sign out
                </NavLink>
            </ul>
        }
    </Authorized>



    <NotAuthorized>
        <a href="authentication/login">
            <span class="oi oi-account-login" aria-hidden="true"></span> Sign in
        </a>
    </NotAuthorized>



</AuthorizeView>

@code{
    private bool expandUserSubMenu;

    private void ToggleUserSubMenu() => expandUserSubMenu = !expandUserSubMenu;

    private async Task BeginLogoutAsync(MouseEventArgs args)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to signout?");
        if (confirmed)
        {
            await BeginLogout(args);
        }
    }

    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}
